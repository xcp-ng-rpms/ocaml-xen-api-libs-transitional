From 860b218f692ee68a49162f23e2781b8bbb336557 Mon Sep 17 00:00:00 2001
From: John Else <john.else@gmail.com>
Date: Mon, 29 Oct 2018 01:46:43 +0000
Subject: [PATCH 3/4] compression: Add function to check whether a given
 algorithm is available

Signed-off-by: John Else <john.else@gmail.com>
(cherry picked from commit c835dd2f5b4d7110b0ccaee7b409c76ea87836a4)
---
 compression/compression.ml  | 2 ++
 compression/compression.mli | 3 +++
 2 files changed, 5 insertions(+)

diff --git a/compression/compression.ml b/compression/compression.ml
index b38aa05..62060a0 100644
--- a/compression/compression.ml
+++ b/compression/compression.ml
@@ -5,6 +5,8 @@ end
 open Xapi_stdext_pervasives.Pervasiveext
 
 module Make(Algorithm : ALGORITHM) = struct
+  let available () = Sys.file_exists Algorithm.executable
+
   (** Helper function to prevent double-closes of file descriptors *)
   let close to_close fd =
     if List.mem fd !to_close then Unix.close fd;
diff --git a/compression/compression.mli b/compression/compression.mli
index 006812b..4334ed0 100644
--- a/compression/compression.mli
+++ b/compression/compression.mli
@@ -3,6 +3,9 @@ module type ALGORITHM = sig
 end
 
 module Make : functor (Algorithm : ALGORITHM) -> sig
+  (** Returns whether this compression algorithm is available *)
+  val available: unit -> bool
+
   (** Runs a compression process which is fed from a pipe whose entrance is passed to 'f'
       and whose output is 'ofd' *)
   val compress: Unix.file_descr -> (Unix.file_descr -> unit) -> unit

